迭代：
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        if not preorder:
            return None

        root = TreeNode(preorder[0])
        stack = [root]
        index = 0

        for i in range(1, len(preorder)):
            preorderVal = preorder[i]
            node = stack[-1]
            if node.val != inorder[index]:
                node.left = TreeNode(preorderVal)
                stack.append(node.left)
            else:
                while stack and stack[-1].val == inorder[index]:
                    node = stack.pop()
                    index += 1
                node.right = TreeNode(preorderVal)
                stack.append(node.right)
            
        return root


递归：
# Definition for a binary tree node.
# class TreeNode(object):
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution(object):
    def myBuildTree(self, preorder, preorder_left, preorder_right, inorder_left, inorder_right, index):
        if preorder_left > preorder_right:
            return None
        
        preorder_root = preorder_left
        inorder_root = index[preorder[preorder_root]]

        root = TreeNode(preorder[preorder_root])
        size_left_subtree = inorder_root - inorder_left

        root.left = self.myBuildTree(preorder, preorder_left + 1, preorder_left + size_left_subtree, inorder_left, inorder_root - 1, index)
        root.right = self.myBuildTree(preorder, preorder_left + size_left_subtree + 1, preorder_right, inorder_root + 1, inorder_right, index)

        return root

    def buildTree(self, preorder, inorder):
        """
        :type preorder: List[int]
        :type inorder: List[int]
        :rtype: TreeNode
        """
        # if not preorder:
        #     return None

        # root = TreeNode(preorder[0])
        # stack = [root]
        # index = 0

        # for i in range(1, len(preorder)):
        #     preorderVal = preorder[i]
        #     node = stack[-1]
        #     if node.val != inorder[index]:
        #         node.left = TreeNode(preorderVal)
        #         stack.append(node.left)
        #     else:
        #         while stack and stack[-1].val == inorder[index]:
        #             node = stack.pop()
        #             index += 1
        #         node.right = TreeNode(preorderVal)
        #         stack.append(node.right)
            
        # return root

        n = len(preorder)
        index = {element: i for i, element in enumerate(inorder)}
        return self.myBuildTree(preorder, 0, n-1, 0, n-1, index)