# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution(object):
    def calculate(self, l1_val, l2_val, flag, tail):
        temp = l1_val + l2_val + flag
        if temp // 10 == 0:
            tail.next = ListNode(temp)
            flag = 0
        else:
            flag = 1
            tail.next = ListNode(temp - 10)
        
        tail = tail.next

        return flag, tail

    def addTwoNumbers(self, l1, l2):
        """
        :type l1: ListNode
        :type l2: ListNode
        :rtype: ListNode
        """
        dummy = ListNode()
        tail = dummy
        flag = 0
        while l1 or  l2:
            l1_val = l1.val if l1 else 0
            l2_val = l2.val if l2 else 0
            flag, tail = self.calculate(l1_val, l2_val, flag, tail)
            l1 = l1.next if l1 else None
            l2 = l2.next if l2 else None

        if flag:
            tail.next = ListNode(flag)

        # ans = 0
        # count = 0
        # while tail:
        #     ans += tail.val * (10**(count))
        
        return dummy.next