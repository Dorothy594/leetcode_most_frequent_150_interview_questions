超时
class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums_list = []
        min_num = float('inf')
        for i in nums:
            if i not in nums_list:
                nums_list.append(i)
        
        ans = 0
        for j in nums_list:
            if j - 1 not in nums_list:
                temp = j
                flag = 1
                while temp + 1 in nums_list:
                    temp += 1
                    flag += 1
                ans = max(ans, flag)
        
        return ans

`set` 和 `list` 是 Python 中两种常用的数据结构，它们在功能和性能上有明显的区别。

### `list`（列表）

#### 特点：
1. **有序**：列表中的元素保持插入顺序。
2. **可变**：可以修改、添加和删除元素。
3. **允许重复**：列表可以包含重复的元素。
4. **支持索引和切片**：可以通过索引访问元素，也可以进行切片操作。

#### 适用场景：
- 需要保持元素顺序。
- 需要存储重复的元素。
- 需要频繁地通过索引访问元素。

#### 示例：

```python
# 创建一个列表
my_list = [1, 2, 3, 4, 5]

# 访问元素
print(my_list[0])  # 输出: 1

# 添加元素
my_list.append(6)

# 删除元素
my_list.remove(2)

# 遍历列表
for item in my_list:
    print(item)
```

### `set`（集合）

#### 特点：
1. **无序**：集合中的元素没有特定的顺序。
2. **可变**：可以添加和删除元素，但集合本身是无序的。
3. **不允许重复**：集合中的每个元素都是唯一的。
4. **不支持索引和切片**：因为集合是无序的，不能通过索引访问元素。

#### 适用场景：
- 需要确保所有元素唯一。
- 需要进行集合操作（如并集、交集、差集）。
- 需要高效地查找、添加和删除元素。

#### 示例：

```python
# 创建一个集合
my_set = {1, 2, 3, 4, 5}

# 添加元素
my_set.add(6)

# 删除元素
my_set.remove(2)

# 检查元素是否存在
print(3 in my_set)  # 输出: True

# 遍历集合
for item in my_set:
    print(item)
```

### 主要区别总结：

1. **顺序**：`list` 是有序的，`set` 是无序的。
2. **重复**：`list` 允许重复元素，`set` 不允许重复元素。
3. **索引**：`list` 支持索引和切片，`set` 不支持索引。
4. **性能**：
   - **查找、添加和删除**：`set` 的时间复杂度为 O(1)（平均情况下），而 `list` 为 O(n)。
   - **内存消耗**：由于哈希表的实现，`set` 通常比 `list` 占用更多的内存。

### 选择使用 `set` 还是 `list`：
- 使用 `list` 当需要保持元素顺序或需要处理重复元素时。
- 使用 `set` 当需要快速查找、唯一元素或进行集合操作时。

这些特性使得 `list` 和 `set` 在不同的应用场景中发挥各自的优势。

改成set即可

class Solution(object):
    def longestConsecutive(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        # nums_list = []
        # min_num = float('inf')
        # for i in nums:
        #     if i not in nums_list:
        #         nums_list.append(i)

        nums_set = set(nums)
        
        ans = 0
        for j in nums_set:
            if j - 1 not in nums_set:
                temp = j
                flag = 1
                while temp + 1 in nums_set:
                    temp += 1
                    flag += 1
                ans = max(ans, flag)
        
        return ans