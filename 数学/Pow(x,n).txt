当n很大的时候无法计算
class Solution(object):
    def myPow(self, x, n):
        """
        :type x: float
        :type n: int
        :rtype: float
        """
        if x == 0:
            return 0.00000
        if (n == 0) or (x == 1):
            return 1.00000

        result = 1
        new_x = round(x, 5)
        if n > 0:
            for _ in range(n):
                result *= new_x
        elif n < 0:
            for _ in range(-n):
                result *= new_x
            result = 1/result
        return round(result, 5)


解题思路：
求 xnx^nx 
n
  最简单的方法是通过循环将 nnn 个 xxx 乘起来，依次求 x1,x2,...,xn−1,xnx^1, x^2, ..., x^{n-1}, x^nx 
1
 ,x 
2
 ,...,x 
n−1
 ,x 
n
  ，时间复杂度为 O(n)O(n)O(n) 。
快速幂法 可将时间复杂度降低至 O(log⁡n)O(\log n)O(logn) ，以下从 “二分法” 和 “二进制” 两个角度解析快速幂法。

快速幂解析（二进制角度）：
利用十进制数字 nnn 的二进制表示，可对快速幂进行数学化解释。

对于任何十进制正整数 nnn ，设其二进制为 "bm...b3b2b1b_m...b_3b_2b_1b 
m
​
 ...b 
3
​
 b 
2
​
 b 
1
​
 "（ bib_ib 
i
​
  为二进制某位值，i∈[1,m]i \in [1,m]i∈[1,m] ），则有：
二进制转十进制： n=1b1+2b2+4b3+...+2m−1bmn = 1b_1 + 2b_2 + 4b_3 + ... + 2^{m-1}b_mn=1b 
1
​
 +2b 
2
​
 +4b 
3
​
 +...+2 
m−1
 b 
m
​
  （即二进制转十进制公式） ；
幂的二进制展开： xn=x1b1+2b2+4b3+...+2m−1bm=x1b1x2b2x4b3...x2m−1bmx^n = x^{1b_1 + 2b_2 + 4b_3 + ... + 2^{m-1}b_m} = x^{1b_1}x^{2b_2}x^{4b_3}...x^{2^{m-1}b_m}x 
n
 =x 
1b 
1
​
 +2b 
2
​
 +4b 
3
​
 +...+2 
m−1
 b 
m
​
 
 =x 
1b 
1
​
 
 x 
2b 
2
​
 
 x 
4b 
3
​
 
 ...x 
2 
m−1
 b 
m
​
 
  ；
根据以上推导，可把计算 xnx^nx 
n
  转化为解决以下两个问题：
计算 x1,x2,x4,...,x2m−1x^1, x^2, x^4, ..., x^{2^{m-1}}x 
1
 ,x 
2
 ,x 
4
 ,...,x 
2 
m−1
 
  的值： 循环赋值操作 x=x2x = x^2x=x 
2
  即可；
获取二进制各位 b1,b2,b3,...,bmb_1, b_2, b_3, ..., b_mb 
1
​
 ,b 
2
​
 ,b 
3
​
 ,...,b 
m
​
  的值： 循环执行以下操作即可。
n&1n \& 1n&1 （与操作）： 判断 nnn 二进制最右一位是否为 111 ；
n>>1n>>1n>>1 （移位操作）： nnn 右移一位（可理解为删除最后一位）。
因此，应用以上操作，可在循环中依次计算 x20b1,x21b2,...,x2m−1bmx^{2^{0}b_1}, x^{2^{1}b_2}, ..., x^{2^{m-1}b_m}x 
2 
0
 b 
1
​
 
 ,x 
2 
1
 b 
2
​
 
 ,...,x 
2 
m−1
 b 
m
​
 
  的值，并将所有 x2i−1bix^{2^{i-1}b_i}x 
2 
i−1
 b 
i
​
 
  累计相乘即可，其中：
x2i−1bi={1,bi=0x2i−1,bi=1x^{2^{i-1}b_i}= \begin{cases} 1 & , b_i = 0 \\ x^{2^{i-1}} & , b_i = 1 \\ \end{cases}
x 
2 
i−1
 b 
i
​
 
 ={ 
1
x 
2 
i−1
 
 
​
  
,b 
i
​
 =0
,b 
i
​
 =1
​
 


快速幂解析（分治法角度）：
快速幂实际上是分治思想的一种应用。

xn=xn/2×xn/2=(x2)n/2x^n = x^{n/2} \times x^{n/2} = (x^2)^{n/2}x 
n
 =x 
n/2
 ×x 
n/2
 =(x 
2
 ) 
n/2
  ，令 n/2n/2n/2 为整数，则需要分为奇偶两种情况（设向下取整除法符号为 "//////" ）：
xn={(x2)n//2,n为偶数x(x2)n//2,n为奇数x^n = \begin{cases} (x^2)^{n//2} & , n 为偶数 \\ x(x^2)^{n//2} & , n 为奇数 \\ \end{cases}
x 
n
 ={ 
(x 
2
 ) 
n//2
 
x(x 
2
 ) 
n//2
 
​
  
,n为偶数
,n为奇数
​
 
观察发现，当 nnn 为奇数时，二分后会多出一项 xxx 。

幂结果获取：
根据推导，可通过循环 x=x2x = x^2x=x 
2
  操作，每次把幂从 nnn 降至 n//2n//2n//2 ，直至将幂降为 000 ；
设 res=1res=1res=1 ，则初始状态 xn=xn×resx^n = x^n \times resx 
n
 =x 
n
 ×res 。在循环二分时，每当 nnn 为奇数时，将多出的一项 xxx 乘入 resresres ，则最终可化至 xn=x0×res=resx^n = x^0 \times res = resx 
n
 =x 
0
 ×res=res ，返回 resresres 即可。


转化为位运算：
向下整除 n//2n // 2n//2 等价于 右移一位 n>>1n >> 1n>>1 ；
取余数 n%2n \% 2n%2 等价于 判断二进制最右位 n&1n \& 1n&1 ；
算法流程：
当 x=0.0x = 0.0x=0.0 时：直接返回 0.00.00.0 ，以避免后续 111 除以 000 操作报错。分析： 数字 000 的正数次幂恒为 000 ； 000 的 000 次幂和负数次幂没有意义，因此直接返回 0.00.00.0 即可。
初始化 res=1res = 1res=1 。
当 n<0n < 0n<0 时：把问题转化至 n≥0n \geq 0n≥0 的范围内，即执行 x=1/xx = 1/xx=1/x ，n=−nn = - nn=−n 。
循环计算：当 n=0n = 0n=0 时跳出。
当 n&1=1n \& 1 = 1n&1=1 时：将当前 xxx 乘入 resresres （即 res∗=xres *= xres∗=x ）。
执行 x=x2x = x^2x=x 
2
  （即 x∗=xx *= xx∗=x ）。
执行 nnn 右移一位（即 n>>=1n >>= 1n>>=1）。
返回 resresres 。
复杂度分析：
时间复杂度 O(log⁡n)O(\log n)O(logn) ： 二分的时间复杂度为对数级别。
空间复杂度 O(1)O(1)O(1) ： resresres, bbb 等变量占用常数大小额外空间。

class Solution(object):
    def myPow(self, x, n):
        """
        :type x: float
        :type n: int
        :rtype: float
        """
        result = 1
        flag = 0
        if n < 0:
            n = -n
            flag = 1

        while n > 0:
            if n % 2 == 1:
                result *= x
            x *= x
            n //= 2

        if flag == 1:
            return 1/result
        else:
            return result